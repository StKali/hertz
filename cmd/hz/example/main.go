// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/common/config"
	"reflect"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/client"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hz/client/biz/model/cloudwego/hertz/template"
	"github.com/cloudwego/hz/client/biz/model/cloudwego/hertz/template/hertz"
)

func main() {
	// new server
	r := server.Default(server.WithHostPorts(":8899"))
	r.POST("life/client1", func(c context.Context, ctx *app.RequestContext) {
		var err error
		var req template.Req
		err = ctx.BindAndValidate(&req)
		if err != nil {
			ctx.String(400, err.Error())
			return
		}
		val := reflect.ValueOf(req)
		for i := 0; i < val.NumField(); i++ {
			if val.Type().Field(i).Type.Kind() == reflect.Slice {
				fmt.Println(val.String())
				continue
			}
			fmt.Printf("value name: %s, value : %s\n", val.Type().Field(i).Name, val.Field(i).Elem().String())
		}
		ctx.String(200, "hello, world")
	})
	go r.Spin()

	time.Sleep(1 * time.Second)

	str := "nihao"
	req := template.Req{
		QueryString:  &str,
		PathString:   &str,
		HeaderString: &str,
	}
	// 通过三种方式建立 client
	// 1. 直接传入 client 的配置，自动创建 hertz client
	// 2. 本地新建一个 client， 然后传入
	// 3. 注册 client 中间件

	// 传配置建立 server
	cli, _ := hertz.NewClient("http://127.0.0.1:8899", hertz.WithHertzClientOption(client.WithKeepAlive(true)))
	respStruct, rawResp, _ := cli.BizMethod2(context.Background(), &req, config.WithSD(false))
	fmt.Println(respStruct)
	fmt.Println("cli1: ", string(rawResp.Body()))
	time.Sleep(1 * time.Second)

	// 传client 建立client
	bytedCli, _ := client.NewClient()
	cli2, _ := hertz.NewClient("http://127.0.0.1:8899", hertz.WithHertzClient(bytedCli))
	respStruct, rawResp, _ = cli2.BizMethod2(context.Background(), &req)
	fmt.Println(respStruct)
	fmt.Println("cli2: ", string(rawResp.Body()))
	time.Sleep(1 * time.Second)

	// 注入client中间件
	cli3, _ := hertz.NewClient("http://127.0.0.1:8899", hertz.WithHertzClientMiddleware())
	respStruct, rawResp, _ = cli3.BizMethod2(context.Background(), &req)
	fmt.Println(respStruct)
	fmt.Println("cli3: ", string(rawResp.Body()))

	// 直接调用， domain 可通过 idl 指定，未来对默认 client 的方法进行拓展
	respStruct, rawResp, _ = hertz.BizMethod2(context.Background(), &req)
	fmt.Println(respStruct)
	fmt.Println("default client: ", string(rawResp.Body()))
}
